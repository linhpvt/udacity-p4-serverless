# TODO: Change the name of the org
org: linhpvt
app: serverless-todo-app
service: serverless-todo-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing

provider:
  name: aws
  runtime: nodejs12.x
  # lambdaHashingVersion: '20201221'

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  profile: pack4

  tracing:
    lambda: true
    apiGateway: true

  # Use these variables in the functions and resources section below. For example,
  # ${self:provider.environment.ATTACHMENT_S3_BUCKET}
  environment:
    TODOS_TABLE: LinhpvtTodos-${self:provider.stage}
    TODOS_CREATED_AT_INDEX: CreatedAtIndex
    ATTACHMENT_S3_BUCKET: linhpvt-images-${self:provider.stage}
    WEB_KEY_SET: https://dev-myljydm5.us.auth0.com/.well-known/jwks.json

    # 5 mins
    SIGNED_URL_EXPIRATION: 300
    # store socket connections
    CONNECTIONS_TABLE: LinhpvtConnections-${self:provider.stage}
    # store thumbnail images created from ATTACHMENT_S3_BUCKET
    THUMBNAILS_S3_BUCKET: linhpvt-images-thumbnail-${self:provider.stage}

  logs:
    # Enable API Gateway logs
    restApi: true

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - xray:PutTelemetryRecords
            - xray:PutTraceSegments
          Resource: '*'

custom:
  # topic name definition
  topicName: imagesTopic-${self:provider.stage}

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # TODO: Configure this function -
  # Provide iamRoleStatements property for performing Actions on DynamoDB
  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          # - dynamodb:Scan
          - dynamodb:GetItem
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
          # - dynamodb:Scan
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}/index/${self:provider.environment.TODOS_CREATED_AT_INDEX}

  # TODO: Configure this function -
  # Provide iamRoleStatements property. Decide the Actions and AWS Resource.
  # To refer to an AWS resource defined in the "Resources" section, you can use "Resource: !GetAtt <resource-name>.Arn"
  # To validate incoming HTTP requests, we have provided the request schemas in function definition below.
  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
          authorizer: Auth
          request:
            schemas:
              application/json: ${file(models/create-todo-model.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
  # TODO: Configure this function
  # Provide property for setting up CORS, Authorizer, iamRoleStatements, and request schemas
  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          cors: true
          authorizer: Auth
          request:
            schemas:
              application/json: ${file(models/update-todo-model.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        # :*: tables created of all users
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
  # TODO: Configure this function
  # Provide property for setting up CORS, Authorizer, iamRoleStatements
  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
  # TODO: Configure this function
  # Provide property for setting up CORS, Authorizer, iamRoleStatements
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        # put and get acctions allow sign URL
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}

  #
  # S3 events trigger one and only one destination target
  # this means: once the an image added to the Attachment, the event will be fired
  # Situation:
  # when an image created in Images bucket, we want to create a new resized image handled by another lambda function
  # and send notifiction
  # SNS support Dead letter Queue
  # allow publish/subscribe on multiple publishers and subscribers by TOPICS
  # use async pattern for this case.
  #

  # send notification once new images added to images bucket
  SendUploadNotifications:
    # ENVs only for this lambda
    environment:
      STAGE: ${self:provider.stage}
      API_ID:
        # WebsocketsApi created by cloundformation
        Ref: WebsocketsApi
    # the handler for the event
    handler: src/lambda/s3/sendNotifications.handler
    events:
      # event fired from sns -> topic named `${self:custom.topicName}`
      - sns:
          arn:
            # the Join function provided by serverless framework
            # Fn::Join -> arn:aws:sns:us-east-1:547argthlddf1425ged:imagesTopic-dev
            Fn::Join:
              - ':'
              - - arn:aws:sns
                # return the arn of AWS -> Region
                - Ref: AWS::Region
                # arn of AWS account
                - Ref: AWS::AccountId
                - ${self:custom.topicName}
          topicName: ${self:custom.topicName}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}
  # another lambda function that handles the same event fired from SNS TOPIC
  ResizeImage:
    handler: src/lambda/s3/resizeImage.handler
    events:
      # sns event -> what Topic we wish to bind this handler to
      - sns:
          arn:
            Fn::Join:
              - ':'
              - - arn:aws:sns
                - Ref: AWS::Region
                - Ref: AWS::AccountId
                - ${self:custom.topicName}
          topicName: ${self:custom.topicName}
    # permissions
    iamRoleStatements:
      # source bucket ATTACHMENT_S3_BUCKET, allowed get object
      - Effect: Allow
        Action:
          # - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*
      # destination bucket, allow put object
      - Effect: Allow
        Action:
          - s3:PutObject
          # - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.THUMBNAILS_S3_BUCKET}/*
  # logical name manged by serverless framework
  ConnectHandler:
    handler: src/lambda/websocket/connect.handler
    events:
      # socket event
      - websocket:
          # special route of socket when new connect request
          route: $connect
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}
  # disconnect lamba function
  DisconnectHandler:
    handler: src/lambda/websocket/disconnect.handler
    events:
      # socket event
      - websocket:
          # special route for disconnect
          route: $disconnect
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.CONNECTIONS_TABLE}

resources:
  Resources:
    # API GATEWAY
    # Add necessary AWS resources. You will need at least the following AWS resources
    # TODO: Fill the properties
    # Feel free to change the names as you like.
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    # DYNAMODB
    # TODO: Create a DynamoDB table with local secondary index and a composite key
    TodosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: todoId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: todoId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODOS_TABLE}

        # get list todo by user
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.TODOS_CREATED_AT_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index

    WebSocketConnectionsDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        # declare table name
        TableName: ${self:provider.environment.CONNECTIONS_TABLE}

    # S3 BUCKETS
    # TODO: Complete the bucket properties below.
    # Do not forget to add the CorsConfiguration property
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      # bucket creation depends on other AWS resource, in this case, SNSTopicPolicy
      # in this case, SNSTopicPolicy must be created first then we create the bucket
      DependsOn: SNSTopicPolicy
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENT_S3_BUCKET}
        # configure notification for this S3 bucket
        NotificationConfiguration:
          TopicConfigurations:
            # declare event source that fire the notification
            - Event: s3:ObjectCreated:Put
              # declare the destination target to which we send the event to
              Topic: !Ref ImagesTopic
        # define CORS for this bucket, that allows users access the bucket over internet
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    # TODO: Complete the policy below and attach it to the bucket defined above
    # For cross referencing the name of the bucket, use "!Ref AttachmentsBucket"
    # BucketPolicy:
    #   Type: AWS::S3::BucketPolicy
    #   Properties:

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: '2012-10-17'
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              # allow anybody gets objects inside the buckets from internet
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*'
        # to which BUCKET we want this policy attatched to
        # BUCKET ID created in the same cloudformation template
        Bucket: !Ref AttachmentsBucket

    # only create a bucket named THUMBNAILS_S3_BUCKET without policy attached
    ThumbnailsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.THUMBNAILS_S3_BUCKET}

    # SNS SERVICE
    # create a SNS Topic Policy
    SNSTopicPolicy:
      Type: AWS::SNS::TopicPolicy
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                # all AWS resources are able to publish to the TOPIC
                AWS: '*'
              Action: sns:Publish
              # the topic that the Publish Action applying to
              Resource:
                # return aws arn of the created ImagesTopic
                !Ref ImagesTopic
              # which event source associated with this TOPIC
              Condition:
                ArnLike:
                  AWS:SourceArn: arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}
        # the list of topics to which this policy applied to
        Topics:
          - !Ref ImagesTopic
    # create a new SNS Topic named `${self:custom.topicName}`
    ImagesTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: Image bucket topic
        TopicName: ${self:custom.topicName}
